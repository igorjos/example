{"version":3,"file":"main.24f43e8e48678a46.js","mappings":"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","names":["NavbarComponent","constructor","ngOnInit","selectors","i0","SidebarComponent","environment","production","apiURL","apiKey","FilesystemService","_http","getCurrentFilesystem","this","get","join","getFileByPath","path","post","factory","Éµfac","DirPathsComponent","_fs","pipe","take","subscribe","data","paths","console","log","ngOnDestroy","existingFilePaths$","unsubscribe","SearchPathsComponent","undefined","makeSearch","f","valid","loading","value","imports","LayoutComponent","AppComponent","ApiInterceptorInterceptor","intercept","request","next","clone","setHeaders","API_KEY","handle","AppModule","bootstrap","provide","HTTP_INTERCEPTORS","useClass","multi","BrowserModule","HttpClientModule","FormsModule","enableProdMode","__NgCli_bootstrap_1","bootstrapModule","catch","err","error"],"sourceRoot":"webpack:///","sources":["./src/app/components/navbar/navbar.component.ts","./src/app/components/navbar/navbar.component.html","./src/app/components/sidebar/sidebar.component.ts","./src/app/components/sidebar/sidebar.component.html","./src/environments/environment.prod.ts","./src/app/services/filesystem.service.ts","./src/app/components/dir-paths/dir-paths.component.html","./src/app/components/dir-paths/dir-paths.component.ts","./src/app/components/search-paths/search-paths.component.html","./src/app/components/search-paths/search-paths.component.ts","./src/app/components/layout/layout.component.ts","./src/app/components/layout/layout.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/interceptors/api-interceptor.interceptor.ts","./src/app/app.module.ts","./src/main.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.less']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<nav class=\"navbar navbar-light bg-light\">\n    <div class=\"container-fluid\">\n        <a class=\"navbar-brand\" href=\"#\">\n            <img src=\"https://getbootstrap.com/docs/5.0/assets/brand/bootstrap-logo.svg\" alt=\"\" width=\"30\" height=\"24\">\n        </a>\n    </div>\n</nav>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-sidebar',\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['./sidebar.component.less']\n})\nexport class SidebarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"sidebar col-12\">\n    <div class=\"list-group\">\n        <!-- For the sake of the example not using a router or router links -->\n        <a href=\"/\" class=\"list-group-item list-group-item-action active\">File imports</a>\n    </div>\n</div>","export const environment = {\n  production: true,\n  apiURL: '/api',\n  apiKey: 'rYQr6M7Ncs0YUS7yBU1ugQ=='\n};\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { environment } from 'src/environments/environment';\nimport { iDirStructure } from '../interfaces/common';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FilesystemService\n{\n\n  constructor(\n    private _http: HttpClient\n  ) { }\n\n\n  getCurrentFilesystem(): Observable<iDirStructure[]>\n  {\n    return this._http.get<iDirStructure[]>([environment.apiURL, 'filesystem'].join(\"/\"))\n  }\n\n  getFileByPath(path: string): Observable<any>\n  {\n    return this._http.post([environment.apiURL, 'filesystem'].join(\"/\"), { path })\n  }\n}\n","<h3>Default file structure</h3>\n<span class=\"badge bg-secondary badge-bottom-marign\">root</span>\n<ul class=\"list-group full-height-scroll reduced-top\">\n\n    <ng-container *ngTemplateOutlet=\"recursiveList; context:{ list: paths }\"></ng-container>\n</ul>\n\n<ng-template #recursiveList let-list=\"list\">\n    <li *ngFor=\"let item of list\" class=\"list-group-item\">\n        <span [ngClass]=\"{'badge bg-secondary badge-bottom-marign':item.children}\">{{item.name}}</span>\n\n        <ul *ngIf=\"item.children\" class=\"list-group\">\n            <ng-container *ngTemplateOutlet=\"recursiveList; context:{ list: item.children }\">\n            </ng-container>\n        </ul>\n    </li>\n</ng-template>","import { Component, Input, OnInit } from '@angular/core';\nimport { take } from 'rxjs/operators';\nimport { FilesystemService } from 'src/app/services/filesystem.service';\n\n@Component({\n  selector: 'app-dir-paths',\n  templateUrl: './dir-paths.component.html',\n  styleUrls: ['./dir-paths.component.less']\n})\nexport class DirPathsComponent implements OnInit\n{\n\n  paths: Array<any> = [];\n\n  existingFilePaths$ = this._fs.getCurrentFilesystem().pipe(take(1)).subscribe((data) =>\n  {\n    this.paths = data;\n    console.log(data)\n  })\n\n  constructor(\n    private _fs: FilesystemService\n  ) { }\n\n  ngOnInit(): void\n  {\n  }\n\n  ngOnDestroy()\n  {\n    this.existingFilePaths$.unsubscribe()\n  }\n\n}\n","<h3>Search path</h3>\n<div class=\"row\">\n    <div class=\"col-12\">\n        <form #f=\"ngForm\" (submit)=\"makeSearch(f)\">\n            <div class=\"input-group mb-3\">\n                <input type=\"text\" name=\"path\" ngModel required class=\"form-control\"\n                    placeholder=\"Enter path e.g example1/root.prog\" aria-label=\"Path\" aria-describedby=\"basic-addon1\">\n\n                <button class=\"input-group-text\" id=\"basic-addon1\" type=\"submit\">search</button>\n            </div>\n        </form>\n        <div class=\"spinner-border\" role=\"status\" *ngIf=\"loading\">\n            <span class=\"sr-only\"></span>\n        </div>\n    </div>\n    <div class=\"col-12\" *ngIf=\"imports\">\n        <ul class=\"list-group full-height-scroll reduced-top\">\n\n            <ng-container *ngTemplateOutlet=\"recursiveList; context:{ list: imports?.contents }\"></ng-container>\n        </ul>\n\n    </div>\n</div>\n\n<ng-template #recursiveList let-list=\"list\">\n    <li *ngFor=\"let item of list\" class=\"list-group-item\">\n        <span>{{item.file_path}}/</span>\n        <span>{{item.file_name}}</span>\n        <ul *ngIf=\"item?.imports\" class=\"list-group\">\n            <ng-container *ngTemplateOutlet=\"recursiveList; context:{ list: item.imports.contents }\">\n            </ng-container>\n        </ul>\n    </li>\n</ng-template>","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { iSearchPathResult } from 'src/app/interfaces/common';\nimport { FilesystemService } from 'src/app/services/filesystem.service';\n\n@Component({\n  selector: 'app-search-paths',\n  templateUrl: './search-paths.component.html',\n  styleUrls: ['./search-paths.component.less']\n})\nexport class SearchPathsComponent implements OnInit\n{\n\n  loading: boolean = false;\n  imports: iSearchPathResult | undefined = undefined;\n\n  constructor(\n    private _fs: FilesystemService\n  ) { }\n\n  ngOnInit(): void { }\n\n  makeSearch(f: NgForm)\n  {\n    if (!f.valid)\n    {\n      console.log('form not valid, various ways to inform the client on UI')\n      return false;\n    }\n\n    this.loading = true;\n\n    this._fs.getFileByPath(f.value.path).pipe(take(1)).subscribe((data) =>\n    {\n      this.imports = data;\n      this.loading = false;\n    }, () =>\n    {\n      this.loading = false\n    })\n\n    return false; //Prevent screen from refreshing\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FilesystemService } from 'src/app/services/filesystem.service';\nimport { take } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-layout',\n  templateUrl: './layout.component.html',\n  styleUrls: ['./layout.component.less']\n})\nexport class LayoutComponent implements OnInit\n{\n\n  ngOnInit(): void\n  {\n  }\n\n}\n","<div class=\"col-12 layout\">\n    <div class=\"row\">\n        <div class=\"col-lg-6 col-md-12 col-xs-12\">\n            <app-dir-paths></app-dir-paths>\n        </div>\n\n        <div class=\"col-lg-6 col-md-12 col-xs-12\">\n\n            <app-search-paths></app-search-paths>\n        </div>\n    </div>\n</div>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.less']\n})\nexport class AppComponent {\n  title = 'ui';\n}\n","<div class=\"container-fluid\">\n  <app-navbar></app-navbar>\n  <div class=\"row\">\n    <div class=\"col-lg-3 col-md-4 col-sm-12\">\n      <app-sidebar></app-sidebar>\n    </div>\n    <div class=\"col-lg-9 col-md-8 col-sm-12\">\n      <app-layout></app-layout>\n    </div>\n  </div>\n</div>","import { Injectable } from '@angular/core';\nimport\n{\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable()\nexport class ApiInterceptorInterceptor implements HttpInterceptor\n{\n\n  constructor() { }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>>\n  {\n\n    const clone = request.clone({\n      setHeaders: {\n        'API_KEY': environment.apiKey\n      }\n    })\n\n    return next.handle(clone);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { SidebarComponent } from './components/sidebar/sidebar.component';\nimport { LayoutComponent } from './components/layout/layout.component';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { FilesystemService } from './services/filesystem.service';\nimport { ApiInterceptorInterceptor } from './interceptors/api-interceptor.interceptor';\nimport { DirPathsComponent } from './components/dir-paths/dir-paths.component';\nimport { SearchPathsComponent } from './components/search-paths/search-paths.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    SidebarComponent,\n    LayoutComponent,\n    DirPathsComponent,\n    SearchPathsComponent,\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: ApiInterceptorInterceptor,\n      multi: true\n    },\n    FilesystemService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"x_google_ignoreList":[]}